// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/12/2022 20:35:27"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          main_pbl
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_pbl_vlg_vec_tst();
// constants                                           
// general purpose registers
reg bt0;
reg bt1;
reg bt2;
reg ch0;
reg ch3;
reg ch4;
reg ch5;
reg ch6;
reg ch7;
reg clk;
reg clk_segs;
// wires                                               
wire buzzer;
wire [4:0] contagem_numero;
wire led;
wire [3:0] numero;
wire [6:0] segmentos;

// assign statements (if any)                          
main_pbl i1 (
// port map - connection between master ports and signals/registers   
	.bt0(bt0),
	.bt1(bt1),
	.bt2(bt2),
	.buzzer(buzzer),
	.ch0(ch0),
	.ch3(ch3),
	.ch4(ch4),
	.ch5(ch5),
	.ch6(ch6),
	.ch7(ch7),
	.clk(clk),
	.clk_segs(clk_segs),
	.contagem_numero(contagem_numero),
	.led(led),
	.numero(numero),
	.segmentos(segmentos)
);
initial 
begin 
#1000000 $finish;
end 

// bt0
initial
begin
	bt0 = 1'b0;
end 

// bt1
initial
begin
	bt1 = 1'b0;
end 

// bt2
initial
begin
	bt2 = 1'b0;
end 

// ch0
initial
begin
	ch0 = 1'b0;
end 

// ch3
initial
begin
	ch3 = 1'b1;
end 

// ch4
initial
begin
	ch4 = 1'b1;
	ch4 = #70000 1'b0;
end 

// ch5
initial
begin
	ch5 = 1'b0;
end 

// ch6
initial
begin
	ch6 = 1'b0;
end 

// ch7
initial
begin
	ch7 = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// clk_segs
initial
begin
	repeat(71)
	begin
		clk_segs = 1'b0;
		clk_segs = #7000 1'b1;
		# 7000;
	end
	clk_segs = 1'b0;
end 
endmodule

